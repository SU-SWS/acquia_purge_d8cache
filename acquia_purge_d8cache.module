<?php

/**
 * @file
 * acquia_purge_d8cache.module
 */

/**
 * Implements hook_init().
 */
function acquia_purge_d8cache_init() {
  $identifier = _acquia_purge_d8cache_get_site_identifier();
  drupal_add_http_header('X-Acquia-Site', $identifier);
}

/**
 * Implements hook_flush_caches().
 */
function acquia_purge_d8cache_flush_caches() {
  $ipv4_addresses = _acquia_purge_d8cache_get_balancers();
  $site = _acquia_purge_d8cache_get_site_identifier();
  foreach ($ipv4_addresses as $ipv4) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_URL, "http://$ipv4/site");
    curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'BAN');
    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1.5);
    curl_setopt($ch, CURLOPT_TIMEOUT, 3);
    curl_setopt($ch, CURLOPT_HTTPHEADER, [
      'X-Acquia-Purge' => $site,
      'Accept-Encoding' => 'gzip',
      'User-Agent' => 'Acquia Purge',
    ]);
    curl_exec($ch);
    curl_close($ch);
  }
}

/**
 * Implements hook_views_pre_view().
 */
function acquia_purge_d8cache_views_pre_build(&$view) {
  // Change views cache to none since varnish will do the cacheing for us.
  if ($view->display_handler->get_plugin('cache')->plugin_name == 'time') {
    $view->display_handler->override_option('cache', ['type' => 'none']);
  }
}

/**
 * Implements hook_invalidate_cache_tags().
 */
function acquia_purge_d8cache_invalidate_cache_tags($tags) {

  // Create grouped sets of 12 so that we can spread out the BAN load.
  $group = 0;
  $groups = [];
  foreach ($tags as $tag) {
    if (!isset($groups[$group])) {
      $groups[$group] = ['tags' => [], ['objects' => []]];
    }
    if (count($groups[$group]['tags']) >= 15) {
      $group++;
    }
    $groups[$group]['tags'][] = $tag;
  }

  // Test if we have at least one group of tag(s) to purge, if not, bail.
  if (!count($groups)) {
    return;
  }

  // Now create requests for all groups of tags.
  $site = _acquia_purge_d8cache_get_site_identifier();
  $ipv4_addresses = _acquia_purge_d8cache_get_balancers();

  $global_opt = [
    'http_errors' => FALSE,
    'connect_timeout' => 1.5,
    'timeout' => 3,
    'verify' => FALSE,
    'acquia_purge_middleware' => TRUE,
  ];

  foreach ($groups as $group_id => $group) {
    $tags = implode(' ', $group['tags']);
    foreach ($ipv4_addresses as $ipv4) {

      $opt = [
        'headers' => [
          'X-Acquia-Purge' => $site,
          'X-Acquia-Purge-Tags' => $tags,
          'Accept-Encoding' => 'gzip',
          'User-Agent' => 'Acquia Purge',
        ],
      ];

      $opt = array_merge($global_opt, $opt);

      $ch = curl_init();
      curl_setopt($ch, CURLOPT_URL, "http://$ipv4/tags");
      curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'BAN');
      curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 1.5);
      curl_setopt($ch, CURLOPT_TIMEOUT, 3);
      curl_setopt($ch, CURLOPT_HTTPHEADER, $opt['headers']);
      curl_exec($ch);
      curl_close($ch);
    };

  }
}

/**
 * Get a hashed unique identifier for the current site.
 *
 * @return bool|string
 *   Unique ID.
 */
function _acquia_purge_d8cache_get_site_identifier() {
  $site_name = _acquia_purge_d8cache_get_site_name();
  $site_path = conf_path();
  return substr(hash('md5', $site_name . $site_path), 0, 16);
}

/**
 * Get the addresses to the load balancers.
 *
 * @return array
 *   Array of IP's.
 */
function _acquia_purge_d8cache_get_balancers() {
  static $balancers;
  // Cache the results statically, preventing multiple lookups during runtime.
  if (is_null($balancers)) {
    $balancers = array_values(variable_get('reverse_proxies', []));
  }
  return $balancers;
}

/**
 * Determine the Acquia site name.
 *
 * @return false|string
 *   Either a boolean FALSE or a string identifying what site we are on.
 */
function _acquia_purge_d8cache_get_site_name() {
  static $ah_site_name;
  if (is_null($ah_site_name)) {
    $ah_site_name = FALSE;
    if (isset($_ENV['AH_SITE_NAME']) && !empty($_ENV['AH_SITE_NAME'])) {
      $ah_site_name = $_ENV['AH_SITE_NAME'];
    }
  }
  return $ah_site_name;
}

/**
 * Determine the Acquia site group.
 *
 * @return false|string
 *   Either a boolean FALSE or a string identifying what site group this is.
 */
function _acquia_purge_d8cache_get_site_group() {
  static $ah_site_group;
  if (is_null($ah_site_group)) {
    $ah_site_group = FALSE;
    if (isset($_ENV['AH_SITE_GROUP']) && !empty($_ENV['AH_SITE_GROUP'])) {
      $ah_site_group = $_ENV['AH_SITE_GROUP'];
    }
  }
  return $ah_site_group;
}
