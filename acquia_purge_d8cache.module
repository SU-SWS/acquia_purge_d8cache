<?php

/**
 * @file
 * acquia_purge_d8cache.module
 */

/**
 * Implements hook_init().
 */
function acquia_purge_d8cache_init() {
  $identifier = _acquia_purge_d8cache_get_site_identifier();
  drupal_add_http_header('X-Acquia-Site', $identifier);
}

/**
 * Implements hook_emit_cache_tags().
 */
function acquia_purge_d8cache_emit_cache_tags($tags) {
  array_walk($tags, '_acquia_purge_d8cache_hash_tag');
  drupal_add_http_header('X-Acquia-Purge-Tags', implode(' ', $tags));
}

/**
 * Implements hook_flush_caches().
 */
function acquia_purge_d8cache_flush_caches() {
  $ipv4_addresses = _acquia_purge_d8cache_get_balancers();

  foreach ($ipv4_addresses as $ipv4) {
    $options = _acquia_purge_d8cache_get_curl_options("http://$ipv4/site");
    $ch = curl_init();
    curl_setopt_array($ch, $options);
    curl_exec($ch);
    curl_close($ch);
  }
}

/**
 * Implements hook_views_pre_view().
 */
function acquia_purge_d8cache_views_pre_build(&$view) {
  // Change views cache to none since varnish will do the cacheing for us.
  if ($view->display_handler->get_plugin('cache')->plugin_name == 'time') {
    $view->display_handler->override_option('cache', ['type' => 'none']);
  }
}

/**
 * Implements hook_invalidate_cache_tags().
 */
function acquia_purge_d8cache_invalidate_cache_tags($tags) {
  // Create grouped sets of 15 so that we can spread out the BAN load.
  $group = 0;
  $groups = [];

  array_walk($tags, '_acquia_purge_d8cache_hash_tag');
  foreach ($tags as $tag) {
    if (isset($groups[$group]) && count($groups[$group]) >= 15) {
      $group++;
    }
    $groups[$group][] = $tag;
  }

  // Test if we have at least one group of tag(s) to purge, if not, bail.
  if (!count($groups)) {
    return;
  }

  // Now create requests for all groups of tags.
  $ipv4_addresses = _acquia_purge_d8cache_get_balancers();

  foreach ($groups as $group) {
    $tags = implode(' ', $group);
    foreach ($ipv4_addresses as $ipv4) {
      $options = _acquia_purge_d8cache_get_curl_options("http://$ipv4/tags", $tags);
      $ch = curl_init();
      curl_setopt_array($ch, $options);
      curl_exec($ch);
      curl_close($ch);
    };
  }
}

/**
 * Implements hook_views_pre_render().
 */
function acquia_purge_d8cache_views_pre_render(&$view) {
  $tags = [];
  if (!empty($view->filter['type'])) {
    $entity_type = $view->base_table;
    foreach ($view->filter['type']->value as $bundle) {
      $tags[] = "{$entity_type}_{$bundle}_list";
    }
  }
  drupal_add_cache_tags($tags);
}

/**
 * Implements hook_cron().
 */
function acquia_purge_d8cache_cron() {
  $last_cron = variable_get('cron_last', FALSE);

  if (!$last_cron) {
    return;
  }
  $last_cron = date('Y-m-d H:i:s', $last_cron);
  $current = date('Y-m-d H:i:s', time());

  // Find all entities that have date values that may have passed since the last
  // cron execution. If the date has passed, invalidate that entity tags. This
  // should help with any views that might have a date filter that is relative
  // to when the user views the site. Such as "Upcoming" vs "Past" content.
  foreach (field_info_field_map() as $field_name => $field_info) {
    if ($field_info['type'] == 'datetime') {
      $query = db_select("field_data_$field_name", 'f')
        ->fields('f')
        ->where("{$field_name}_value between '$last_cron' and '$current'")
        ->execute();

      while ($field_data = $query->fetchAssoc()) {
        $entity = entity_load($field_data['entity_type'], [$field_data['entity_id']]);
        _d8cache_entity_invalidate_cache_tags($field_data['entity_type'], reset($entity));
      }
    }
  }
}

/**
 * Get curl options for varnish ban requests.
 *
 * @param string $url
 *   Curl request url.
 * @param array $tags
 *   Optionally pass tags header.
 *
 * @return array
 *   Keyed array of curl options.
 */
function _acquia_purge_d8cache_get_curl_options($url, $tags = []) {
  $site = _acquia_purge_d8cache_get_site_identifier();
  $options = [
    CURLOPT_URL => $url,
    CURLOPT_CUSTOMREQUEST => 'BAN',
    CURLOPT_CONNECTTIMEOUT => 1.5,
    CURLOPT_TIMEOUT => 3,
    CURLOPT_SSL_VERIFYPEER => 0,
    CURLOPT_HTTPHEADER => [
      "X-Acquia-Purge: $site",
      "Accept-Encoding: gzip",
      "User-Agent: Acquia Purge",
    ],
  ];

  if ($tags) {
    $options[CURLOPT_HTTPHEADER][] = "X-Acquia-Purge-Tags: $tags";
  }
  return $options;
}

/**
 * Get a hashed unique identifier for the current site.
 *
 * @return bool|string
 *   Unique ID.
 */
function _acquia_purge_d8cache_get_site_identifier() {
  $site_name = _acquia_purge_d8cache_get_site_name();
  $site_path = conf_path();
  return substr(hash('md5', $site_name . $site_path), 0, 16);
}

/**
 * Get the addresses to the load balancers.
 *
 * @return array
 *   Array of IP's.
 */
function _acquia_purge_d8cache_get_balancers() {
  static $balancers;
  // Cache the results statically, preventing multiple lookups during runtime.
  if (is_null($balancers)) {
    $balancers = array_values(variable_get('reverse_proxies', []));
  }
  return $balancers;
}

/**
 * Determine the Acquia site name.
 *
 * @return false|string
 *   Either a boolean FALSE or a string identifying what site we are on.
 */
function _acquia_purge_d8cache_get_site_name() {
  static $ah_site_name;
  if (is_null($ah_site_name)) {
    $ah_site_name = FALSE;
    if (isset($_ENV['AH_SITE_NAME']) && !empty($_ENV['AH_SITE_NAME'])) {
      $ah_site_name = $_ENV['AH_SITE_NAME'];
    }
  }
  return $ah_site_name;
}

/**
 * Hash the cache tag into a 4 character string.
 *
 * @param string $tag
 *   Cache tag.
 */
function _acquia_purge_d8cache_hash_tag(&$tag) {
  $tag = substr(hash('md5', $tag), 0, 4);
}
